import type { IHomebridgePluginUi, IHomebridgeUiToastHelper, PluginConfig, PluginFormSchema, PluginMetadata, PluginSchema, ServerEnvMetadata } from './ui.interface';
export declare class MockHomebridgePluginUi extends EventTarget implements IHomebridgePluginUi {
    mockPluginConfig: PluginConfig[];
    mockPluginSchema: PluginSchema;
    plugin: PluginMetadata;
    serverEnv: ServerEnvMetadata;
    constructor();
    toast: MockHomebridgeUiToastHelper;
    fixScrollHeight(): void;
    closeSettings(): void;
    showSpinner(): void;
    hideSpinner(): void;
    disableSaveButton(): void;
    enableSaveButton(): void;
    showSchemaForm(): void;
    hideSchemaForm(): void;
    endForm(): void;
    createForm(schema: PluginFormSchema, data: any): MockHomebridgeUiFormHelper;
    getPluginConfig(): Promise<PluginConfig[]>;
    updatePluginConfig(pluginConfig: PluginConfig[]): Promise<PluginConfig[]>;
    savePluginConfig(): Promise<void>;
    getPluginConfigSchema(): Promise<PluginSchema>;
    request(path: string, body: string): Promise<{}>;
    userCurrentLightingMode(): Promise<'light' | 'dark'>;
    i18nCurrentLang(): Promise<string>;
    i18nGetTranslation(): Promise<{}>;
    getCachedAccessories(): Promise<never[]>;
}
export declare class MockHomebridgeUiToastHelper implements IHomebridgeUiToastHelper {
    success(message: string, title: string): void;
    error(message: string, title: string): void;
    warning(message: string, title: string): void;
    info(message: string, title: string): void;
}
export declare class MockHomebridgeUiFormHelper {
    constructor(parent: IHomebridgePluginUi, schema: PluginFormSchema, data: any, submitButton?: string, cancelButton?: string);
    end(): void;
    onChange(fn: any): void;
    onSubmit(fn: any): void;
    onCancel(fn: any): void;
}
//# sourceMappingURL=ui.mock.d.ts.map