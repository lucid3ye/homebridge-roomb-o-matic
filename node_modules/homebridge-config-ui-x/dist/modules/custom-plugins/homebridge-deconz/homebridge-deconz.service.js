"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HomebridgeDeconzService = void 0;
const node_path_1 = require("node:path");
const common_1 = require("@nestjs/common");
const fs_extra_1 = require("fs-extra");
const config_service_1 = require("../../../core/config/config.service");
let HomebridgeDeconzService = class HomebridgeDeconzService {
    constructor(configService) {
        this.configService = configService;
    }
    async streamDumpFile() {
        const dumpPath = (0, node_path_1.resolve)(this.configService.storagePath, 'homebridge-deconz.json.gz');
        if (!await (0, fs_extra_1.pathExists)(dumpPath)) {
            throw new common_1.NotFoundException();
        }
        return new common_1.StreamableFile((0, fs_extra_1.createReadStream)(dumpPath));
    }
};
exports.HomebridgeDeconzService = HomebridgeDeconzService;
exports.HomebridgeDeconzService = HomebridgeDeconzService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_service_1.ConfigService])
], HomebridgeDeconzService);
//# sourceMappingURL=homebridge-deconz.service.js.map